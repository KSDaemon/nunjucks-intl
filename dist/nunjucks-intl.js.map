{"version":3,"sources":["../src/nunjucks-intl.js"],"names":["getNumberFormat","Intl","NumberFormat","getDateTimeFormat","DateTimeFormat","getMessageFormat","IntlMessageFormat","getRelativeFormat","IntlRelativeFormat","registerWith","Nunjucks","helpers","intlGet","formatDate","formatTime","formatRelative","formatNumber","formatMessage","formatHTMLMessage","name","hasOwnProperty","addGlobal","addExtension","intl","tags","parse","parser","nodes","lexer","tok","nextToken","args","parseSignature","advanceAfterBlockEnd","value","body","parseUntilBlocks","CallExtension","run","context","options","path","intlData","lookup","pathParts","split","obj","len","i","length","undefined","ReferenceError","date","format","Date","assertIsDate","locales","formatOptions","getFormatOptions","now","num","assertIsNumber","message","intlName","formats","call","key","env","filters","escape","val","safe","errMsg","isFinite","TypeError","self","type"],"mappings":"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","sourcesContent":["import IntlMessageFormat from 'intl-messageformat';\nimport IntlRelativeFormat from 'intl-relativeformat';\nimport createFormatCache from 'intl-format-cache';\n\nimport {extend} from './utils.js';\n\nvar getNumberFormat   = createFormatCache(Intl.NumberFormat);\nvar getDateTimeFormat = createFormatCache(Intl.DateTimeFormat);\nvar getMessageFormat  = createFormatCache(IntlMessageFormat);\nvar getRelativeFormat = createFormatCache(IntlRelativeFormat);\n\nfunction registerWith(Nunjucks) {\n\n    var helpers = {\n        intlGet          : intlGet,\n        formatDate       : formatDate,\n        formatTime       : formatTime,\n        formatRelative   : formatRelative,\n        formatNumber     : formatNumber,\n        formatMessage    : formatMessage,\n        formatHTMLMessage: formatHTMLMessage\n    };\n\n    for (var name in helpers) {\n        if (helpers.hasOwnProperty(name)) {\n            Nunjucks.addGlobal(name, helpers[name]);\n        }\n    }\n\n    // intl custom tags are added through extension API\n    Nunjucks.addExtension('intl', new intl());\n\n    // -- Helpers --------------------------------------------------------------\n\n    function intl() {\n\n        this.tags = ['intl'];\n\n        this.parse = function(parser, nodes, lexer) {\n            // get the tag token\n            var tok = parser.nextToken();\n\n            // parse the args and move after the block end. passing true\n            // as the second arg is required if there are no parentheses\n            var args = parser.parseSignature(null, true);\n            parser.advanceAfterBlockEnd(tok.value);\n\n            // parse the body\n            var body = parser.parseUntilBlocks('endintl');\n\n            parser.advanceAfterBlockEnd();\n\n            // See above for notes about CallExtension\n            return new nodes.CallExtension(this, 'run', args, [body]);\n        };\n\n        this.run = function(context, options, body) {\n            //console.log('context', context, 'context.lookup', context.lookup);\n            //var frame = context.frame.push(),\n            //    intlData = extend({}, context.lookup('intl'), options);\n            //\n            //frame.set('data.intl', intlData);\n\n            return body();\n        };\n\n        /*\n        if (!options.fn) {\n            throw new Error('{{#intl}} must be invoked as a block helper');\n        }\n\n        // Create a new data frame linked the parent and create a new intl data\n        // object and extend it with `options.data.intl` and `options.hash`.\n        var data     = createFrame(options.data),\n            intlData = extend({}, data.intl, options.hash);\n\n        data.intl = intlData;\n\n        return options.fn(this, {data: data});\n        */\n    }\n\n    function intlGet(path) {\n        var intlData  = this.lookup('intl'),\n            pathParts = path.split('.');\n\n        var obj, len, i;\n\n        // Use the path to walk the Intl data to find the object at the given\n        // path, and throw a descriptive error if it's not found.\n        try {\n            for (i = 0, len = pathParts.length; i < len; i++) {\n                obj = intlData = intlData[pathParts[i]];\n            }\n        } finally {\n            if (obj === undefined) {\n                throw new ReferenceError('Could not find Intl object: ' + path);\n            }\n        }\n\n        return obj;\n    }\n\n    function formatDate(date, format, options) {\n        date = new Date(date);\n        assertIsDate(date, 'A date or timestamp must be provided to {{formatDate}}');\n\n        if (!options) {\n            if (typeof format === 'object') {\n                options = format;\n                format  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        var locales       = this.lookup('intl').locales;\n        var formatOptions = getFormatOptions(this, 'date', format, options);\n\n        return getDateTimeFormat(locales, formatOptions).format(date);\n    }\n\n    function formatTime(date, format, options) {\n        date = new Date(date);\n        assertIsDate(date, 'A date or timestamp must be provided to {{formatTime}}');\n\n        if (!options) {\n            if (typeof format === 'object') {\n                options = format;\n                format  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        var locales       = this.lookup('intl').locales;\n        var formatOptions = getFormatOptions(this, 'time', format, options);\n\n        return getDateTimeFormat(locales, formatOptions).format(date);\n    }\n\n    function formatRelative(date, format, options) {\n        date = new Date(date);\n        assertIsDate(date, 'A date or timestamp must be provided to {{formatRelative}}');\n\n        if (!options) {\n            if (typeof format === 'object') {\n                options = format;\n                format  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        var locales       = this.lookup('intl').locales;\n        var formatOptions = getFormatOptions(this, 'relative', format, options);\n        var now           = options.now;\n\n        // Remove `now` from the options passed to the `IntlRelativeFormat`\n        // constructor, because it's only used when calling `format()`.\n        delete formatOptions.now;\n\n        return getRelativeFormat(locales, formatOptions).format(date, { now: now });\n    }\n\n    function formatNumber(num, format, options) {\n        assertIsNumber(num, 'A number must be provided to {{formatNumber}}');\n\n        if (!options) {\n            if (typeof format === 'object') {\n                options = format;\n                format  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        var locales       = this.lookup('intl').locales;\n        var formatOptions = getFormatOptions(this, 'number', format, options);\n\n        return getNumberFormat(locales, formatOptions).format(num);\n    }\n\n    function formatMessage(message, options) {\n\n        if (!options) {\n            if (typeof message === 'object') {\n                options = message;\n                message  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        if (!(message || typeof message === 'string' || options.intlName)) {\n            throw new ReferenceError(\n                '{{formatMessage}} must be provided a message or intlName'\n            );\n        }\n\n        var intlData = this.lookup('intl') || {},\n            locales  = intlData.locales,\n            formats  = intlData.formats;\n\n        // Lookup message by path name. User must supply the full path to the\n        // message on `options.data.intl`.\n        if (!message && options.intlName) {\n            message = intlGet.call(this, options.intlName, options);\n        }\n\n        // When `message` is a function, assume it's an IntlMessageFormat\n        // instance's `format()` method passed by reference, and call it. This\n        // is possible because its `this` will be pre-bound to the instance.\n        if (typeof message === 'function') {\n            return message(options);\n        }\n\n        if (typeof message === 'string') {\n            message = getMessageFormat(message, locales, formats);\n        }\n\n        return message.format(options);\n    }\n\n    function formatHTMLMessage(message, options) {\n\n        if (!options) {\n            if (typeof message === 'object') {\n                options = message;\n                message  = null;\n            } else {\n                options = {};\n            }\n        }\n\n        var key, value;\n\n        // Replace string properties in `options` with HTML-escaped strings.\n        for (key in options) {\n            if (options.hasOwnProperty(key)) {\n                value = options[key];\n\n                // Escape string value.\n                if (typeof value === 'string') {\n                    options[key] = this.env.filters.escape(value).val;\n                }\n            }\n        }\n\n        return this.env.filters.safe(formatMessage.call(this, message, options));\n    }\n\n    // -- Utilities ------------------------------------------------------------\n\n    function assertIsDate(date, errMsg) {\n        // Determine if the `date` is valid by checking if it is finite, which\n        // is the same way that `Intl.DateTimeFormat#format()` checks.\n        if (!isFinite(date)) {\n            throw new TypeError(errMsg);\n        }\n    }\n\n    function assertIsNumber(num, errMsg) {\n        if (typeof num !== 'number') {\n            throw new TypeError(errMsg);\n        }\n    }\n\n    function getFormatOptions(self, type, format, options) {\n        var formatOptions;\n\n        if (format) {\n            if (typeof format === 'string') {\n                formatOptions = intlGet.call(self, 'formats.' + type + '.' + format, options);\n            }\n\n            formatOptions = extend({}, formatOptions, options);\n        } else {\n            formatOptions = options;\n        }\n\n        return formatOptions;\n    }\n}\n\nexport {registerWith};\n"],"file":"nunjucks-intl.js"}