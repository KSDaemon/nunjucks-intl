{"name":"Nunjucks-intl","tagline":"Nunjucks helpers for internationalization.","body":"Nunjucks Intl\r\n=============\r\n\r\nThis library provides [Nunjucks][] helpers for internationalization. The helpers provide a declarative way\r\nto format dates, numbers, and string messages with pluralization support.\r\n\r\n[![npm Version][npm-badge]][npm]\r\n[![Build Status][travis-badge]][travis]\r\n[![Dependency Status][david-badge]][david]\r\n\r\nOverview\r\n--------\r\n\r\nNunjucks Intl uses [FormatJS][] components under the hood, the docs can be found on the webiste:\r\n<http://formatjs.io/>\r\n\r\n### Features\r\n\r\n- Display numbers with separators.\r\n- Display dates and times correctly.\r\n- Display dates relative to \"now\".\r\n- Pluralize labels in strings.\r\n- Support for 200+ languages.\r\n- Runs in the browser and Node.js.\r\n- Built on standards.\r\n\r\n### Quick example\r\n\r\n```nunjucks\r\n{{ formatMessage(\r\n    intlGet(\"messages.post.meta\"),\r\n    {\r\n        num: post.comments.length,\r\n        ago: formatRelative(post.date)\r\n    })\r\n}}\r\n```\r\n\r\n```js\r\nvar data = {\r\n    post: {\r\n        date    : 1422046290531,\r\n        comments: [/*...*/]\r\n    }\r\n};\r\n\r\nvar intlData = {\r\n    locales : ['en-US'],\r\n    messages: {\r\n        post: {\r\n            meta: 'Posted {ago}, {num, plural, one{# comment} other{# comments}}'\r\n        }\r\n    }\r\n};\r\n\r\ndata.intl = intlData;\r\n\r\nvar html = nunjucks.renderString(/* Template source above */, data);\r\n```\r\n\r\nThis example would render: **\"Posted 3 days ago, 1,000 comments\"** to the `html` variable.\r\nThe `post.meta` message is written in the industry standard [ICU Message syntax][], which you can\r\nalso learn about on the [FormatJS website][FormatJS].\r\n\r\nIn all examples below, for simplicity, nunjucks.renderString is used, but, of course,\r\ntemplate render() works the same way.\r\n\r\n### API Methods\r\n\r\n#### Registering Nunjucks Intl with Nunjucks instance\r\n\r\nTo start using intl helpers in your template, first of all, you need to register helpers with your instance of\r\nNunjucks enviroment.\r\n\r\nThis is done by:\r\n\r\n```javascript\r\nvar nunjucks = require('nunjucks');\r\nvar env = new nunjucks.Environment();\r\n\r\nvar nunjucksIntl = require('nunjucks-intl');\r\n\r\nnunjucksIntl.registerWith(env);\r\n\r\n```\r\n\r\nThis adds a few global functions to nunjucks enviroment, so you can use them in your templates. Nunjucks Intl\r\nhelpers expect to find `intl` hash-map in template context data. More info below.\r\n\r\n#### intlGet helper\r\n\r\nThis helper implements a lookup process by path to access data from the intl object passed into the Nunjucks data\r\ncontext when rendering the template. Usually this helper is used in a subexpressions to lookup\r\ntranslated string messages;\r\n\r\n```javascript\r\nNunjucks.renderString('{{ formatMessage(intlGet(\"MSG\"), { firstName: firstName, lastName: lastName }) }}',\r\n    {\r\n        firstName: 'Vasiliy',\r\n        lastName : 'Pupkin',\r\n        intl: {\r\n            MSG : 'Hi, my name is {firstName} {lastName}.',\r\n            locales: 'en-US'\r\n        }\r\n    })\r\n// output: Hi, my name is Vasiliy Pupkin.\r\n```\r\n\r\n#### formatNumber helper\r\n\r\nThis helper is used to format numbers, including currencies and percentages.\r\n\r\n```javascript\r\nNunjucks.renderString('{{ formatNumber(NUM)}}', { NUM: 4.004, intl: { locales: 'en-US' }})\r\n// output: 4.004\r\n\r\nNunjucks.renderString('{{ formatNumber(NUM) }}', { NUM: 4.004, intl: { locales: 'de-DE' }})\r\n// output: 4,004\r\n\r\nNunjucks.renderString('{{ formatNumber(NUM) }}', {  NUM: 40000, intl: { locales: 'en-US' }})\r\n// output: 40,000\r\n\r\nNunjucks.renderString('{{ formatNumber(NUM) }}', { NUM: 40000, intl: { locales: 'de-DE' }})\r\n// output: 40.000\r\n\r\nNunjucks.renderString('{{ formatNumber(NUM) }}', { NUM: 40000.004, intl: { locales: 'en-US' }})\r\n// output: 40,000.004\r\n\r\nNunjucks.renderString('{{ formatNumber(NUM) }}', { NUM: 40000.004, intl: { locales: 'de-DE' }})\r\n// output: 40.000,004\r\n\r\nNunjucks.renderString('{{ formatNumber(40000, { style: \"currency\", currency: \"USD\" }) }}', { intl: { locales: 'en-US' }})\r\n// output: $40,000.00\r\n\r\nNunjucks.renderString('{{ formatNumber(40000, { style: \"currency\", currency: \"EUR\", currencyDisplay: \"code\" }) }}', { intl: { locales: 'en-US' }})\r\n// output: EUR40,000.00\r\n\r\n// also it's possible to return a currency even when using a different locale\r\nNunjucks.renderString('{{ formatNumber(40000, { style: \"currency\", currency: CURRENCY }) }}', { CURRENCY: 'JPY', intl: { locales: 'de-DE' }})\r\n// output: 40.000 ¥\r\n\r\nNunjucks.renderString('{{ formatNumber(0.45, { style: \"percent\" }) }}', { intl: { locales: 'en-US' }})\r\n// output: 45%\r\n\r\n```\r\n\r\n#### formatDate/formatTime helpers\r\n\r\nThis helpers are used to format dates, including time. You can pass a date string or timestamp.\r\nformatDate and formatTime works the same way, and the only difference is the place for searching custom formats.\r\nformatDate search them in formats.date, and formatTime - in formats.time respectively.\r\nIn example below, custom format is used, read more on [FormatJS][] site.\r\n\r\n```javascript\r\nvar dateStr   = 'Thu Jan 23 2014 18:00:44 GMT-0500 (EST)';\r\nvar timeStamp = 1390518044403; //same as dateStr\r\nvar intlData = {\r\n    locales: 'en-US',\r\n    formats: {\r\n        date: {\r\n            short: {\r\n                day: \"numeric\",\r\n                month: \"numeric\",\r\n                year: \"numeric\"\r\n            }\r\n        },\r\n        usual: {\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n            timeZone: \"UTC\"\r\n        }\r\n    }\r\n};\r\n\r\nNunjucks.renderString('{{ formatDate(\"' + dateStr + '\") }}', { intl: { locales: 'en-US' }});\r\n// output: 1/24/2014\r\n\r\n//The same output using custom format\r\nNunjucks.renderString('{{ formatDate(\"' + dateStr + '\", \"short\") }}', { intl: intlData });\r\n// output: 1/24/2014\r\n\r\n//timestamp is passed as a number\r\nNunjucks.renderString('{{ formatDate(' + timeStamp + ') }}', { intl: { locales: 'en-US' }});\r\n// output: 1/24/2014\r\n\r\nNunjucks.renderString('{{ formatDate(' + timeStamp + ', \"usual\") }}', { intl: intlData });\r\n// output: 11:00 PM\r\n\r\n```\r\n\r\n#### formatRelative helper\r\n\r\nThis helper is used to format relative date and time.\r\n\r\n```javascript\r\nvar tomorrow = new Date().getTime() + (24 * 60 * 60 * 1000);\r\n\r\nNunjucks.renderString('{{ formatRelative(date) }}', { date: tomorrow, intl: { locales: 'en-US' }});\r\n// output: tomorrow\r\n\r\nNunjucks.renderString('{{ formatRelative(date, { style: \"numeric\" }) }}', { date: tomorrow, intl: { locales: 'en-US' }})\r\n// output: in 1 day\r\n\r\n// also it's possible to set NOW\r\nNunjucks.renderString('{{ formatRelative(2000, { now: 1000 }) }}', { intl: { locales: 'en-US' }});\r\n// output: in 1 second\r\n\r\nNunjucks.renderString('{{ formatRelative(0, { now: 1000 }) }}', { intl: { locales: 'en-US' }});\r\n// output: 1 second ago\r\n```\r\n\r\n#### formatMessage/formatHTMLMessage helpers\r\n\r\nThis helpers are used to format internationalization messages, including dates, numbers, and pluralization cases.\r\nUsing formatHTMLMessage, you can pass messages with html entities, and they will not be escaped.\r\nUser data is always escaped.\r\n\r\n```javascript\r\nNunjucks.renderString('{{ formatMessage({ firstName: firstName, lastName: lastName, intlName: \"MSG\" }) }}',\r\n    {\r\n        firstName: 'Vasiliy',\r\n        lastName : 'Pupkin',\r\n        intl: {\r\n            MSG      : 'Hi, my name is {firstName} {lastName}.',\r\n            locales: 'en-US'\r\n        }\r\n    });\r\n// output: Hi, my name is Vasiliy Pupkin.\r\n\r\nNunjucks.renderString('{{ formatMessage(POP_MSG, { city: city, population: population, census_date: census_date, timeZone: timeZone }) }}',\r\n    {\r\n        POP_MSG    : '{city} has a population of {population, number, integer} as of {census_date, date, long}.',\r\n        city       : 'Atlanta',\r\n        population : 5475213,\r\n        census_date: (new Date('1/1/2010')).getTime(),\r\n        timeZone   : 'UTC',\r\n        intl: { locales: 'en-US' }\r\n    });\r\n// output: Atlanta has a population of 5,475,213 as of January 1, 2010.\r\n\r\nNunjucks.renderString('{{ formatMessage(BDAY_MSG, { year: year }) }}',\r\n    {\r\n        BDAY_MSG: 'This is my {year, selectordinal, one{#st} two{#nd} few{#rd} other{#th}} birthday.',\r\n        year    : 3,\r\n        intl: { locales: 'en-US' }\r\n    });\r\n// output: This is my 3rd birthday.\r\n\r\n\r\nNunjucks.renderString('{{ formatHTMLMessage(intlGet(\"MSG\"), { firstName: firstName, lastName: lastName }) }}',\r\n    {\r\n        firstName: '<Vasiliy>',\r\n        lastName : '<Pupkin>',\r\n        intl: {\r\n            MSG : 'Hi, my <name> is {firstName} {lastName}.',\r\n            locales: 'en-US'\r\n        }\r\n    });\r\n// output: Hi, my <name> is &lt;Vasiliy&gt; &lt;Pupkin&gt;.\r\n```\r\n\r\nAlso, you can lookup into [tests](tests/helpers.js) for more usage examples.\r\n\r\nContribute\r\n----------\r\n\r\nLet's make Nunjucks Intl and FormatJS better! If you're interested in helping, all contributions\r\nare welcome and appreciated. Nunjucks Intl is just one of many packages that make up the\r\n[FormatJS suite of packages][FormatJS GitHub], and you can contribute to any/all of them,\r\nincluding the [Format JS website][FormatJS] itself.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nThis software is free to use under the BSD license.\r\nSee the [LICENSE file][LICENSE] for license text and copyright information.\r\n\r\n\r\n[Nunjucks]: http://mozilla.github.io/nunjucks\r\n[npm]: https://www.npmjs.org/package/nunjucks-intl\r\n[npm-badge]: https://img.shields.io/npm/v/nunjucks-intl.svg?style=flat-square\r\n[travis]: https://travis-ci.org/KSDaemon/nunjucks-intl\r\n[travis-badge]: http://img.shields.io/travis/KSDaemon/nunjucks-intl.svg?style=flat-square\r\n[david]: https://david-dm.org/KSDaemon/nunjucks-intl\r\n[david-badge]: https://img.shields.io/david/KSDaemon/nunjucks-intl.svg?style=flat-square\r\n[FormatJS]: http://formatjs.io/\r\n[FormatJS GitHub]: http://formatjs.io/github/\r\n[ICU Message syntax]: http://formatjs.io/guide/#messageformat-syntax\r\n[LICENSE]: https://github.com/KSDaemon/nunjucks-intl/blob/master/LICENSE\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}